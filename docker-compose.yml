version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: booking_app
    ports:
      - "${PORT:-3000}:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      RATE_LIMIT_TIME_WINDOW: ${RATE_LIMIT_TIME_WINDOW:-60000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - booking_network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: booking_postgres
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - booking_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: booking_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      sh -c "
      if [ -n \"$${REDIS_PASSWORD}\" ]; then
        redis-server --requirepass \"$${REDIS_PASSWORD}\"
      else
        redis-server
      fi
      "
    volumes:
      - redis_data:/data
    networks:
      - booking_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  booking_network:
    driver: bridge